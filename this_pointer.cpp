// 1) cannot be changed
// 2) internally pass to non static functions
// 3) if member function is const then this pointer becomes const

//Note: All the commented code is generated by the compiler internally
class Base {
    int v;    
public:
    Base(){}
    void f(int a) { v=a; }
    //void f(Base* const this, int a) { this->v = a; }
    void f1 (int a) const  {  } // { this->v=a; } Error because this pointer is const
    //const void f1(const Base* const this, int a) const {}
};
int main() {
    Base b;
    b.f(1);
    //f(&b, 1)
    b.f1(2);
    //f(&b, 2)
}
